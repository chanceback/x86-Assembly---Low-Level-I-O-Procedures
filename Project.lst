Microsoft (R) Macro Assembler Version 14.29.30143.0	    06/07/22 18:10:53
7Designing Low-Level I/O Procedures    (Proj6_backc.asm	     Page 1 - 1


				TITLE Designing Low-Level I/O Procedures    (Proj6_backc.asm)

				; Author: Chance Back
				; Last Modified: 6/4/22
				; OSU email address: backc@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:   6              Due Date: 06/05/2022
				; Description: Program prompts user to input 10 signed decimal integers and records each individual input as a string. If the value
				;		entered is not a signed integer the value is discarded and the program prompts the user to enter a valid integer.
				;		Once a valid input is received, the string is converted to numerical form using string primitives. The values are then stored 
				;		in a list. Each value in the list is then converted back to string form using string primitives before being displayed to the
				;		user. Lastly, the sum and truncated average of the list of numbers are calculated and displayed as well.



				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGenerateString
				;
				; Prompts the user to input a string and stores the value in a given variable.
				;
				; Preconditions: do not use edi or edx as arguments.
				;				 total_bytes_read is type DWORD.
				;
				; Receives:
				;		prompt_address		= address of message to display to user when asking for input
				;		user_input			= address to store string entered by user
				;		total_bytes_read	= address to store length of string
				;		MAX_STR_LENGTH is global variable/constant
				;
				; Returns: 
				;		user_input			= address now contains string entered by user
				;		total_bytes_read	= address now contains length of string
				; ---------------------------------------------------------------------------------
				mGetString MACRO prompt_address, user_input, total_bytes_read
				  ; save registers used by MACRO
				  PUSH	EAX
				  PUSH	ECX
				  PUSH	EDX
				  PUSH	EDI

				  ; prompt user for string
				  MOV	EDX, prompt_address
				  CALL	WriteString

				  ; get user input
				  MOV	EDX, user_input
				  MOV	ECX, MAX_STR_LENGTH
				  CALL	ReadString

				  ; store user input data
				  MOV	EDI, [total_bytes_read]
				  MOV	[EDI], EAX

				  ; restore registers used to orginal values
				  POP	EDI
				  POP	EDX
				  POP	ECX
				  POP	EAX

				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mGenerateString
				;
				; Displays a given string.
				;
				; Preconditions: do not use edx as argument.
				;
				; Receives:
				;		string_address = address of string to be displayed
				;
				; returns: none.
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO string_address
				  ;save registers used by MACRO
				  PUSH	EDX

				  ; display string
				  MOV	EDX, string_address
				  CALL	WriteString

				  ; restore registers used to original values
				  POP	EDX
				ENDM


 = 0000001D			MAX_STR_LENGTH = 29		
 = 0000000A			NUM_ARR_LENGTH = 10

 00000000			.data

 00000000 50 52 4F 47 52	intro			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 13,10
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A
 0000003E  57 72 69 74 74					BYTE	"Written by: Chance Back", 13,10,13,10
	   65 6E 20 62 79
	   3A 20 43 68 61
	   6E 63 65 20 42
	   61 63 6B 0D 0A
	   0D 0A
 00000059  50 6C 65 61 73					BYTE	"Please provide 10 signed decimal integers.", 13,10
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A
 00000085  45 61 63 68 20					BYTE	"Each number needs to be small enough to fit inside a 32 bit register.", 13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A
 000000CC  41 66 74 65 72					BYTE	"After you have finished inputting the raw numbers I will display a list of the integers,", 13,10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 0D 0A
 00000126  74 68 65 69 72					BYTE	"their sum, and their average value.", 13,10,13,10,0 
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0D 0A 0D 0A 00
 0000014E 50 6C 65 61 73	prompt			BYTE	"Please enter a signed integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 0000016E 45 52 52 4F 52	prompt_error	BYTE	"ERROR: You did not enter a signed number or your number was too big.", 13,10
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
 000001B4  50 6C 65 61 73					BYTE	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001C7 59 6F 75 20 65	message_1		BYTE	"You entered the following numbers:", 13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001EC 54 68 65 20 73	message_2		BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000020A 54 68 65 20 74	message_3		BYTE	"The truncated average is: ", 0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000225 54 68 61 6E 6B	goodbye			BYTE	"Thanks for playing!", 13,10,0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 0D
	   0A 00
 0000023B  0000000A [		num_array		SDWORD	10 DUP(?)					; array to store valid numbers entered in by user
	    00000000
	   ]
 00000263  0000001E [		user_input		BYTE	30 DUP(?)					; empty string to store user input 
	    00
	   ]
 00000281 00000000		bytes_read		DWORD	?							; stores the number of bytes read by the mGetString MACRO
 00000285 00000000		converted_num	SDWORD	?							; stores the user's input converted from string to decimal
 00000289 2C 20 00		list_spacing	BYTE	", ", 0
 0000028C 00000000		sum				SDWORD	?							; sum of numbers entered by user
 00000290 00000000		trunc_avg		SDWORD	?							; truncated average of numbers entered


 00000000			.code

 00000000			main PROC

				  ; display the introduction
				  mDisplayString OFFSET intro
 00000000  52		     1	  PUSH	EDX
 00000001  BA 00000000 R     1	  MOV	EDX, OFFSET intro
 00000006  E8 00000000 E     1	  CALL	WriteString
 0000000B  5A		     1	  POP	EDX

				; --------------------------
				; Gets 10 valid signed numbers capable of fitting in an SDWORD from the user
				;	by calling ReadVal PROC. Stores the values received into num_array.
				; --------------------------
 0000000C  B9 0000000A		  MOV	ECX, NUM_ARR_LENGTH
 00000011  BE 0000023B R	  MOV	ESI, OFFSET num_array
 00000016			_GetNextVal:
				  ; push required parameters and call ReadVal
 00000016  68 0000014E R	  PUSH	OFFSET prompt
 0000001B  68 0000016E R	  PUSH	OFFSET prompt_error
 00000020  68 00000263 R	  PUSH	OFFSET user_input
 00000025  68 00000281 R	  PUSH	OFFSET bytes_read
 0000002A  68 00000285 R	  PUSH	OFFSET converted_num
 0000002F  E8 000000BE		  CALL	ReadVal

				  ; move resulting value into num_array
 00000034  A1 00000285 R	  MOV	EAX, converted_num
 00000039  89 06		  MOV	[ESI], EAX

				  ; increment num_array and loop to _GetNextVal
 0000003B  83 C6 04		  ADD	ESI, 4
 0000003E  E2 D6		  LOOP	_GetNextVal
 00000040  E8 00000000 E	  CALL	CrLf

				; --------------------------
				; Display values in num_array by calling WriteVal PROC and
				;	incrementing through the list with a loop.
				; --------------------------
				  mDisplayString OFFSET message_1
 00000045  52		     1	  PUSH	EDX
 00000046  BA 000001C7 R     1	  MOV	EDX, OFFSET message_1
 0000004B  E8 00000000 E     1	  CALL	WriteString
 00000050  5A		     1	  POP	EDX
 00000051  B9 0000000A		  MOV	ECX, NUM_ARR_LENGTH
 00000056  BE 0000023B R	  MOV	ESI, OFFSET num_array

 0000005B			_DisplayVal:
				  ; display value in num_array
 0000005B  8B 06		  MOV	EAX, [ESI]
 0000005D  50			  PUSH	EAX
 0000005E  E8 00000210		  CALL	WriteVal
				  
				  ; if last element in list displayed, do not print spacing
 00000063  83 F9 01		  CMP	ECX, 1
 00000066  74 0C		  JE	_Loop
				  mDisplayString OFFSET list_spacing
 00000068  52		     1	  PUSH	EDX
 00000069  BA 00000289 R     1	  MOV	EDX, OFFSET list_spacing
 0000006E  E8 00000000 E     1	  CALL	WriteString
 00000073  5A		     1	  POP	EDX

 00000074			_Loop:
				  ; increment num_array and loop to _DisplayVal
 00000074  83 C6 04		  ADD	ESI, 4
 00000077  E2 E2		  LOOP	_DisplayVal
 00000079  E8 00000000 E	  CALL CrLf

				; --------------------------
				; Display the sum and truncated average of the values in num_array.
				; --------------------------
				  ; calculate the sum of values in num_array
 0000007E  68 0000023B R	  PUSH	OFFSET num_array
 00000083  68 0000028C R	  PUSH	OFFSET sum						
 00000088  E8 000002B0		  CALL	calculateSum

				  ; display the sum of the values
				  mDisplayString OFFSET	message_2
 0000008D  52		     1	  PUSH	EDX
 0000008E  BA 000001EC R     1	  MOV	EDX, OFFSET	message_2
 00000093  E8 00000000 E     1	  CALL	WriteString
 00000098  5A		     1	  POP	EDX
 00000099  FF 35 0000028C R	  PUSH	sum									
 0000009F  E8 000001CF		  CALL	WriteVal
 000000A4  E8 00000000 E	  CALL	CrLf

				  ; calculate the truncated average of the values in num_array
 000000A9  FF 35 0000028C R	  PUSH	sum								
 000000AF  68 00000290 R	  PUSH	OFFSET trunc_avg					
 000000B4  E8 000002B7		  CALL	calculateTruncAvg
				  
				  ; display the truncated average
				  mDisplayString OFFSET	message_3
 000000B9  52		     1	  PUSH	EDX
 000000BA  BA 0000020A R     1	  MOV	EDX, OFFSET	message_3
 000000BF  E8 00000000 E     1	  CALL	WriteString
 000000C4  5A		     1	  POP	EDX
 000000C5  FF 35 00000290 R	  PUSH	trunc_avg							
 000000CB  E8 000001A3		  CALL	WriteVal
 000000D0  E8 00000000 E	  CALL	CrLf
 000000D5  E8 00000000 E	  CALL	CrLf

				  ; display the goodbye message
				  mDisplayString OFFSET goodbye
 000000DA  52		     1	  PUSH	EDX
 000000DB  BA 00000225 R     1	  MOV	EDX, OFFSET goodbye
 000000E0  E8 00000000 E     1	  CALL	WriteString
 000000E5  5A		     1	  POP	EDX
 000000E6  E8 00000000 E	  CALL	CrLf

					Invoke ExitProcess,0	
 000000EB  6A 00	   *	    push   +000000000h
 000000ED  E8 00000000 E   *	    call   ExitProcess
 000000F2			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Asks the user to input a numerical value that fits in an SDWORD. Validates the user
				;	input and stores it in numerical form in at a passed parameter.
				;
				; Preconditions: variable used to store converted value is type SDWORD.
				;				 variable usesd to store bytes read is type DWORD.
				;
				; Postconditions: none.
				;
				; Receives: 
				;		[EBP + 24]	= address of message to display when asking user for input
				;		[EBP + 20]	= address of error message to print when user input is invalid
				;		[EBP + 16]	= address of empty string to store user input
				;		[EBP + 12]	= address to store number of characters entered in by user
				;		[EBP + 8]	= address to store valid user input
				;
				; Returns: [EBP + 8] = address of user input in numerical form
				; ---------------------------------------------------------------------------------

 000000F2			ReadVal PROC USES ESI EAX EBX
				  ; is_valid		: local variable passed to validate PROC as output parameter 
				  ; overflow_check	: local variable passed to convertToDec PROC as output parameter
				  LOCAL is_valid:DWORD, overflow_check:DWORD

				  ; set local variables to zero
 000000F2  55		   *	    push   ebp
 000000F3  8B EC	   *	    mov    ebp, esp
 000000F5  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000000F8  56		   *	    push   esi
 000000F9  50		   *	    push   eax
 000000FA  53		   *	    push   ebx
 000000FB  C7 45 FC		  MOV	DWORD PTR [is_valid], 0
	   00000000
 00000102  C7 45 F8		  MOV	DWORD PTR [overflow_check], 0
	   00000000

				  ; get string from user
				  mGetString [EBP + 24], [EBP + 16], [EBP + 12]
 00000109  50		     1	  PUSH	EAX
 0000010A  51		     1	  PUSH	ECX
 0000010B  52		     1	  PUSH	EDX
 0000010C  57		     1	  PUSH	EDI
 0000010D  8B 55 18	     1	  MOV	EDX, [EBP + 24]
 00000110  E8 00000000 E     1	  CALL	WriteString
 00000115  8B 55 10	     1	  MOV	EDX, [EBP + 16]
 00000118  B9 0000001D	     1	  MOV	ECX, MAX_STR_LENGTH
 0000011D  E8 00000000 E     1	  CALL	ReadString
 00000122  8B 7D 0C	     1	  MOV	EDI, [[EBP + 12]]
 00000125  89 07	     1	  MOV	[EDI], EAX
 00000127  5F		     1	  POP	EDI
 00000128  5A		     1	  POP	EDX
 00000129  59		     1	  POP	ECX
 0000012A  58		     1	  POP	EAX
 0000012B  EB 22		  JMP	_Validation

 0000012D			_Error:
				  ; get string from user with error message
				  mGetString [EBP + 20], [EBP + 16], [EBP + 12]
 0000012D  50		     1	  PUSH	EAX
 0000012E  51		     1	  PUSH	ECX
 0000012F  52		     1	  PUSH	EDX
 00000130  57		     1	  PUSH	EDI
 00000131  8B 55 14	     1	  MOV	EDX, [EBP + 20]
 00000134  E8 00000000 E     1	  CALL	WriteString
 00000139  8B 55 10	     1	  MOV	EDX, [EBP + 16]
 0000013C  B9 0000001D	     1	  MOV	ECX, MAX_STR_LENGTH
 00000141  E8 00000000 E     1	  CALL	ReadString
 00000146  8B 7D 0C	     1	  MOV	EDI, [[EBP + 12]]
 00000149  89 07	     1	  MOV	[EDI], EAX
 0000014B  5F		     1	  POP	EDI
 0000014C  5A		     1	  POP	EDX
 0000014D  59		     1	  POP	ECX
 0000014E  58		     1	  POP	EAX

				; --------------------------
				; Validates the string input contains only signed numerical 
				;	characters with validate PROC. Then checks if the
				;	procedure returns 1 in the local variable is_valid. If
				;	number was not valid, jumps to _Error.
				; --------------------------
 0000014F			_Validation:
				  ; push required parameters and call validate PROC
 0000014F  FF 75 10		  PUSH	[EBP + 16]			
 00000152  8B 75 0C		  MOV	ESI, [EBP + 12]
 00000155  8B 1E		  MOV	EBX, [ESI]
 00000157  53			  PUSH	EBX					; push number of bytes read from user input
 00000158  8D 45 FC		  LEA	EAX, is_valid
 0000015B  50			  PUSH	EAX					; push address of local variable is_valid
 0000015C  E8 0000002C		  CALL	validate

				  ; check results of validate PROC
 00000161  8B 45 FC		  MOV	EAX, is_valid	
 00000164  83 F8 00		  CMP	EAX, 0
 00000167  74 C4		  JE	_Error

				; --------------------------
				; Converts the user inputted string to its equivalent numerical
				;	value with convertToDec PROC. Then checks if the number was 
				;	too large by checking if the procedure returns 1 in the
				;	local variable overflow_check. If number was too large,
				;	jumps to _Error.
				; -------------------------- 
				  ; push required parameters and call convertToDec PROC
 00000169  FF 75 10		  PUSH	[EBP + 16]			
 0000016C  8B 75 0C		  MOV	ESI, [EBP + 12]
 0000016F  8B 1E		  MOV	EBX, [ESI]			
 00000171  53			  PUSH	EBX					; push number of bytes read from user input
 00000172  FF 75 08		  PUSH	[EBP + 8]			
 00000175  8D 45 F8		  LEA	EAX, overflow_check
 00000178  50			  PUSH	EAX					; push address of local variable overflow_check
 00000179  E8 00000067		  CALL	convertToDec

				  ; check if procedure indcated an overflow
 0000017E  8B 45 F8		  MOV	EAX, overflow_check	
 00000181  83 F8 00		  CMP	EAX, 0
 00000184  75 A7		  JNE	_Error

 00000186  5B		   *	    pop    ebx
 00000187  58		   *	    pop    eax
 00000188  5E		   *	    pop    esi
 00000189  C9		   *	    leave  
 0000018A  C2 0014		  RET	20
 0000018D			ReadVal	ENDP

				; ---------------------------------------------------------------------------------
				; Name: validate
				;
				; Validates that a given string is a signed numerical value in ASCII form.
				;
				; Preconditions: the array is type BYTE.
				;
				; Postconditions: none.
				;
				; Receives: 
				;		[EBP + 32]	= string to be validated
				;		[EBP + 28]	= length of string
				;		[EBP + 24]	= address to store results of validation: 1(True) or 0(False)
				;
				; Returns: [EBP + 24] = result of validation
				; ---------------------------------------------------------------------------------

 0000018D			validate PROC USES EBP EDI ESI EAX ECX
 0000018D  55		   *	    push   ebp
 0000018E  57		   *	    push   edi
 0000018F  56		   *	    push   esi
 00000190  50		   *	    push   eax
 00000191  51		   *	    push   ecx
 00000192  8B EC		  MOV	EBP, ESP
				; --------------------------
				; Increments through the given string making sure each byte is valued
				;	below 57. If one is greater than 57 then the string is not valid
				;	and the program jumps to _False.
				; --------------------------
				  ; set counter to length of string
 00000194  8B 4D 1C		  MOV	ECX, [EBP + 28]	

				  ; point EDI to the beginning of the given string
 00000197  8B 7D 20		  MOV	EDI, [EBP + 32]		

 0000019A			_UpperCheck:
				  ; check if byte value is below 57
 0000019A  B0 39		  MOV	AL, 57
 0000019C  FC			  CLD
 0000019D  AE			  SCASB
 0000019E  7C 34		  JL	_False
 000001A0  E2 F8		  LOOP	_UpperCheck

				; --------------------------
				; Increments through the given string making sure each byte is valued
				;	above 48. If one is less than 48 it checks if the value is a sign
				;	character, '+'/'-', at the begining of the string. If it is, then
				;	it continues on to validate the rest of the bytes in the string.
				;	If it is not, then the string is not valid and it jumps to _False.
				; --------------------------
				  ; set counter to length of string
 000001A2  8B 4D 1C		  MOV	ECX, [EBP + 28]		

				  ; point EDI to the beginning of the given string
 000001A5  8B 7D 20		  MOV	EDI, [EBP + 32]		

 000001A8			_LowerCheck:
				  ; check if byte value is above 48
 000001A8  B0 30		  MOV	AL, 48
 000001AA  FC			  CLD
 000001AB  AE			  SCASB
 000001AC  7F 04		  JG	_SignCheck
 000001AE  E2 F8		  LOOP	_LowerCheck
 000001B0  EB 17		  JMP	_True

 000001B2			_SignCheck:
				  ; check if byte address is equal to address at beginning of string
 000001B2  4F			  DEC	EDI					; undo SCASB increment
 000001B3  8B 75 20		  MOV	ESI, [EBP + 32]	
 000001B6  3B F7		  CMP	ESI, EDI			
 000001B8  75 1A		  JNE	_False				

				  ; check if byte is sign '+'/'-'
 000001BA  8A 06		  MOV	AL, [ESI]
 000001BC  3C 2B		  CMP	AL, 43			
 000001BE  74 06		  JE	_IsSigned
 000001C0  3C 2D		  CMP	AL, 45			
 000001C2  74 02		  JE	_IsSigned
 000001C4  EB 0E		  JMP	_False

 000001C6			_IsSigned:
				  ; restore SCASB increment and loop to _LowerCheck
 000001C6  47			  INC	EDI				
 000001C7  E2 DF		  LOOP	_LowerCheck
				  
 000001C9			_True:
				 ; set results variable to 1(True)
 000001C9  8B 7D 18		  MOV	EDI, [EBP + 24]	
 000001CC  C7 07 00000001	  MOV	DWORD PTR [EDI], 1
 000001D2  EB 09		  JMP	_End

 000001D4			_False:
				; set results variable to 0(False)
 000001D4  8B 7D 18		  MOV	EDI, [EBP + 24]	
 000001D7  C7 07 00000000	  MOV	DWORD PTR [EDI], 0

 000001DD			_End:
 000001DD  59		   *	    pop    ecx
 000001DE  58		   *	    pop    eax
 000001DF  5E		   *	    pop    esi
 000001E0  5F		   *	    pop    edi
 000001E1  5D		   *	    pop    ebp
 000001E2  C2 000C		  RET	12
 000001E5			validate ENDP

				; ---------------------------------------------------------------------------------
				; Name: convertToDec
				;
				; Converts given string to its numerical value.
				;
				; Preconditions: variable used to store results is type SDWORD.
				;				 variable used to check for overflow is type DWORD
				;
				; Postconditions: none.
				;
				; Receives: 
				;		[EBP + 20]	= address of string to be converted
				;		[EBP + 16]	= number of bytes in given string
				;		[EBP + 12]	= address to store converted number
				;		[EBP + 8]	= address to store overflow check: 1(True) or 0(False)
				;		
				;
				; Returns: 
				;		[EBP + 20]	= coverted number
				;		[EBP + 8]	= overflow check result
				; ---------------------------------------------------------------------------------

 000001E5			convertToDec PROC USES ESI EDI EAX EBX ECX
				  ; inter_val	: stores the intermediate value during conversion
				  ; is_negative	: stores (1) if passed value is positive or (0) if positive
				  LOCAL	inter_val:DWORD, is_negative:DWORD

				  ; set local variables to zero
 000001E5  55		   *	    push   ebp
 000001E6  8B EC	   *	    mov    ebp, esp
 000001E8  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000001EB  56		   *	    push   esi
 000001EC  57		   *	    push   edi
 000001ED  50		   *	    push   eax
 000001EE  53		   *	    push   ebx
 000001EF  51		   *	    push   ecx
 000001F0  C7 45 FC		  MOV	DWORD PTR [inter_val], 0
	   00000000
 000001F7  C7 45 F8		  MOV	DWORD PTR [is_negative], 0
	   00000000

				  ; set variable used to check for an overflow to 0
 000001FE  8B 7D 08		  MOV	EDI, [EBP + 8]
 00000201  C7 07 00000000	  MOV	DWORD PTR [EDI], 0

				  ; load given string into ESI
 00000207  8B 75 14		  MOV	ESI, [EBP + 20]

				  ; set counter to number of bytes in given string
 0000020A  8B 4D 10		  MOV	ECX, [EBP + 16]

				; --------------------------
				; Checks if string of digits begins with sign '+'/'-'.
				;	If the string begins with '+', the charcter is skipped.
				;	If the string begins with '-', the character is skipped,
				;	and the is_negative variable is set to 1. The is_negative
				;	variable will be used later to negate the result.
				; --------------------------
				  ; move first charcter into AL
 0000020D  FC			  CLD
 0000020E  AC			  LODSB
				  
				  ; check if the first character in string is '+'
 0000020F  49			  DEC	ECX
 00000210  3C 2B		  CMP	AL, 43				
 00000212  74 0F		  JE	_NextChar			

				  ; check if first character in string is '-'
 00000214  3C 2D		  CMP	AL, 45
 00000216  75 09		  JNE	_ResetRegisters
 00000218  C7 45 F8		  MOV	DWORD PTR [is_negative], 1			
	   00000001
 0000021F  EB 02		  JMP	_NextChar							

 00000221			_ResetRegisters:
				  ; restore ESI and ECX if value is not '+'/'-'
 00000221  4E			  DEC ESI
 00000222  41			  INC ECX

				; --------------------------
				; String together numerical values via algorithm from Module 8.1
				;	If result is too large to fit in SDWORD, set the overflow 
				;	checker and make no changes to variable designated to store
				;	result.
				; --------------------------
 00000223			_NextChar:
				  ; move character into AL
 00000223  FC			  CLD
 00000224  AC			  LODSB

				  ; convert ASCII character to numerical value and move into EBX
 00000225  2C 30		  SUB	AL, 48
 00000227  0F B6 D8		  MOVZX	EBX, AL

				  ; add numerical value of ASCII charcter to the total 
 0000022A  B8 0000000A		  MOV	EAX, 10
 0000022F  F7 6D FC		  IMUL	inter_val
 00000232  70 2D		  JO	_Overflow
 00000234  89 45 FC		  MOV	inter_val, EAX
 00000237  01 5D FC		  ADD	inter_val, EBX

				  ; check if new total fits in a SDWORD
 0000023A  70 07		  JO	_EdgeCaseCheck
 0000023C  E2 E5		  LOOP	_NextChar

				  ; move final value into EAX
 0000023E  8B 45 FC		  MOV	EAX, inter_val
 00000241  EB 0F		  JMP	_IsNegativeCheck

				  ; check if overflow instance is the valid number -2147483648
 00000243			_EdgeCaseCheck:
 00000243  83 7D F8 01		  CMP	is_negative, 1
 00000247  75 18		  JNE	_Overflow
 00000249  81 7D FC		  CMP	inter_val, 2147483648
	   80000000
 00000250  75 0F		  JNE	_Overflow

				  ; negate result if given value was negative
 00000252			_IsNegativeCheck:
 00000252  83 7D F8 01		  CMP	is_negative, 1
 00000256  75 02		  JNE	_StoreVal
 00000258  F7 D8		  NEG	EAX

				  ; store result in designated variable
 0000025A			_StoreVal:
 0000025A  8B 7D 0C		  MOV	EDI, [EBP + 12]
 0000025D  89 07		  MOV	[EDI], EAX
 0000025F  EB 09		  JMP	_End

 00000261			_Overflow:
				  ; set overflow check variable to 1(True)
 00000261  8B 7D 08		  MOV	EDI, [EBP + 8]
 00000264  C7 07 00000001	  MOV	DWORD PTR [EDI], 1

 0000026A			_End:
 0000026A  59		   *	    pop    ecx
 0000026B  5B		   *	    pop    ebx
 0000026C  58		   *	    pop    eax
 0000026D  5F		   *	    pop    edi
 0000026E  5E		   *	    pop    esi
 0000026F  C9		   *	    leave  
 00000270  C2 0010		  RET	16
 00000273			convertToDec ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Converts a given number into a string and displays that number.
				;
				; Preconditions: number must be signed and fit within a 32 bit register.
				;
				; Postconditions: none.
				;
				; Receives: 
				;		[EBP + 8]	= value to be displayed
				;
				; Returns: none.
				; ---------------------------------------------------------------------------------

 00000273			WriteVal PROC USES EDI ESI EAX EBX ECX EDX
				  ; string_arr_1	: stores the initially generated string 
				  ; string_arr_2	: stores string with characters in the proper order
				  ; digit_total		: represents the value of a single digit at th end of the given number
				  ; inter_value		: stores the intermediate value during conversion
				  ; is_negative		: stores (1) if passed value is positive or (0) if positive
				  LOCAL string_arr_1[11]:BYTE, string_arr_2[11]:BYTE, digit_total:BYTE, inter_value:DWORD, is_negative:DWORD

				  ; set local variables to zero
 00000273  55		   *	    push   ebp
 00000274  8B EC	   *	    mov    ebp, esp
 00000276  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 00000279  57		   *	    push   edi
 0000027A  56		   *	    push   esi
 0000027B  50		   *	    push   eax
 0000027C  53		   *	    push   ebx
 0000027D  51		   *	    push   ecx
 0000027E  52		   *	    push   edx
 0000027F  C6 45 E9 00		  MOV	BYTE PTR [digit_total], 0
 00000283  C6 45 E0 00		  MOV	BYTE PTR [is_negative], 0

				  ; fill local string_arr_1 with zeros
 00000287  B9 0000000B		  MOV	ECX, 11
 0000028C  8D 45 F5		  LEA	EAX, string_arr_1
 0000028F  8B F8		  MOV	EDI, EAX
 00000291  B0 00		  MOV	AL, 0
 00000293  FC			  CLD
 00000294  F3/ AA		  REP STOSB

				  ; fill local string_arr_2 with zeros
 00000296  B9 0000000B		  MOV	ECX, 11
 0000029B  8D 45 EA		  LEA	EAX, string_arr_2
 0000029E  8B F8		  MOV	EDI, EAX
 000002A0  B0 00		  MOV	AL, 0
 000002A2  FC			  CLD
 000002A3  F3/ AA		  REP STOSB

				  ; load string_arr_1 address into EDI
 000002A5  8D 5D F5		  LEA	EBX, string_arr_1
 000002A8  8B FB		  MOV	EDI, EBX
 000002AA  83 C7 0A		  ADD	EDI, 10

				  ; load given value into local variable inter_value
 000002AD  8B 5D 08		  MOV	EBX, [EBP + 8]
 000002B0  89 5D E4		  MOV	inter_value, EBX

				  ; check if value is negative
 000002B3  8B 5D E4		  MOV	EBX, inter_value
 000002B6  83 FB 00		  CMP	EBX, 0
 000002B9  79 06		  JNS	_CheckVal
 000002BB  F7 5D E4		  NEG	inter_value				; change value to positive if negative
 000002BE  FF 45 E0		  INC	is_negative				; set is_negative to true

				; --------------------------
				; Decrements inter_value while simultaneously incrementing digit_total 
				;	until the last digit in interm_value is zero. This is checked by
				;	dividing the number by 10 and checking if the remainder is zero.
				; --------------------------
 000002C1			_CheckVal:
				  ; check if number is divisible by 10
 000002C1  8B 45 E4		  MOV	EAX, inter_value
 000002C4  BA 00000000		  MOV	EDX, 0
 000002C9  BB 0000000A		  MOV	EBX, 10
 000002CE  F7 F3		  DIV	EBX
 000002D0  83 FA 00		  CMP	EDX, 0					
 000002D3  74 08		  JE	_AddToString

				  ; adjust inter_value and digit_total by 1 if not a multiple of 10
 000002D5  FF 4D E4		  DEC	inter_value
 000002D8  FE 45 E9		  INC	digit_total

 000002DB  EB E4		  JMP	_CheckVal

				; --------------------------
				; Converts digit_total to its ASCII value and moves it into string_arr_1.
				;	starting at the end of list and working backwards. This is done to
				;	ensure characters are in the correct order at the end of the
				;	string.
				; --------------------------
 000002DD			_AddToString:
				  ; convert digit_total to ASCII equivalent
 000002DD  8A 45 E9		  MOV	AL, digit_total
 000002E0  04 30		  ADD	AL, 48

				  ; add ASCII character to string_arr_1
 000002E2  FD			  STD
 000002E3  AA			  STOSB

				  ; reset digit_total to zero
 000002E4  C6 45 E9 00		  MOV	BYTE PTR digit_total, 0

				; --------------------------
				; Checks if interm_value is zero. If it is zero then jumps to _PrintVal
				;	because the string now contains the full number. Else the number is
				;	divided by 10 and the next digit of the sequence is examined.
				; --------------------------
				  ; check if interm_value is zero
 000002E8  83 7D E4 00		  CMP	inter_value, 0
 000002EC  74 14		  JE	_PrintVal

				  ; divide interm_value by 10
 000002EE  8B 45 E4		  MOV	EAX, inter_value
 000002F1  BA 00000000		  MOV	EDX, 0
 000002F6  BB 0000000A		  MOV	EBX, 10
 000002FB  F7 F3		  DIV	EBX
 000002FD  89 45 E4		  MOV	inter_value, EAX

				  ; repeat process for next digit in interm_value
 00000300  EB BF		  JMP	_CheckVal

				; --------------------------
				; Moves ASCII values from string_arr_1 into string_arr_2.
				;	The values are copied from the end of first string
				;	array into the beginning of the second string array.
				;	This allows the string to be displayed using
				;	mDisplayString. If the passed number was negative, the
				;	ASCII value for '-' is added to the beginning of the
				;	second string prior to transfer.
				; --------------------------
 00000302			_PrintVal:

				  ; move address of first string array to ESI
 00000302  8D 45 F5		  LEA	EAX, string_arr_1
 00000305  8B F0		  MOV	ESI, EAX

				  ; move address of second string array to EDI
 00000307  8D 45 EA		  LEA	EAX, string_arr_2
 0000030A  8B F8		  MOV	EDI, EAX

				  ; set counter to length of the first and second string
 0000030C  B9 0000000B		  MOV	ECX, 11

 00000311			_NegativeVal:
				  ; add '-' sign to beginning of second string if passed value was negative
 00000311  83 7D E0 01		  CMP	is_negative, 1
 00000315  75 04		  JNE	_ReadChar
 00000317  B0 2D		  MOV	AL, 45
 00000319  FC			  CLD
 0000031A  AA			  STOSB

 0000031B			_ReadChar:
				  ; load byte value from first string array and check if equal to zero
 0000031B  FC			  CLD
 0000031C  AC			  LODSB
 0000031D  3C 00		  CMP	AL, 0
 0000031F  75 02		  JNE	_CopyToNewArr
 00000321  E2 F8		  LOOP	_ReadChar

 00000323			_CopyToNewArr:
				  ; add byte value to the second string array 
 00000323  FC			  CLD
 00000324  AA			  STOSB
 00000325  E2 F4		  LOOP	_ReadChar

				  ; display converted value
 00000327  8D 45 EA		  LEA	EAX, string_arr_2
				  mDisplayString EAX
 0000032A  52		     1	  PUSH	EDX
 0000032B  8B D0	     1	  MOV	EDX, EAX
 0000032D  E8 00000000 E     1	  CALL	WriteString
 00000332  5A		     1	  POP	EDX

 00000333  5A		   *	    pop    edx
 00000334  59		   *	    pop    ecx
 00000335  5B		   *	    pop    ebx
 00000336  58		   *	    pop    eax
 00000337  5E		   *	    pop    esi
 00000338  5F		   *	    pop    edi
 00000339  C9		   *	    leave  
 0000033A  C2 0004		  RET	4
 0000033D			WriteVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: calculateSum
				;
				; Calculates the sum of a given list of numbers.
				;
				; Preconditions: list must be type SDWORD. The list of numbers length should
				;	be equal to the value in the constant NUM_ARR_LENGth.
				;
				; Postconditions: none.
				;
				; Receives: 
				;		[EBP + 12]	= list of numbers
				;		[EBP + 8]	= address of empty variable to store sum
				;		NUM_ARR_LENGTH is global variable/constant
				;
				; Returns: [EBP + 8] = sum of values in list
				; ---------------------------------------------------------------------------------

 0000033D			calculateSum PROC USES EDI ESI EAX ECX
				  ; inter_sum	: used to track the value of sum between calculations
				  LOCAL inter_sum:SDWORD

				  ; set local variables to zero
 0000033D  55		   *	    push   ebp
 0000033E  8B EC	   *	    mov    ebp, esp
 00000340  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000343  57		   *	    push   edi
 00000344  56		   *	    push   esi
 00000345  50		   *	    push   eax
 00000346  51		   *	    push   ecx
 00000347  C7 45 FC		  MOV	SDWORD PTR [inter_sum], 0
	   00000000

				  ; set counter to length of array
 0000034E  B9 0000000A		  MOV	ECX, NUM_ARR_LENGTH

				  ; move num list into ESI
 00000353  8B 75 0C		  MOV	ESI, [EBP + 12]

				; --------------------------
				; Loop through the given array. Add each indexed value in
				;	num list to inter_sum. Then move result into designated
				;	sum variable.
				; --------------------------
 00000356			_NextVal:
				  ; add value at [ESI] to local sum
 00000356  8B 06		  MOV	EAX, [ESI]
 00000358  01 45 FC		  ADD	inter_sum, EAX

				  ; move to next index num array
 0000035B  83 C6 04		  ADD	ESI, 4
 0000035E  E2 F6		  LOOP	_NextVal

				  ; move the sum value into designated sum variable
 00000360  8B 7D 08		  MOV	EDI, [EBP + 8]
 00000363  8B 45 FC		  MOV	EAX, inter_sum
 00000366  89 07		  MOV	[EDI], EAX

 00000368  59		   *	    pop    ecx
 00000369  58		   *	    pop    eax
 0000036A  5E		   *	    pop    esi
 0000036B  5F		   *	    pop    edi
 0000036C  C9		   *	    leave  
 0000036D  C2 0008		  RET	8
 00000370			calculateSum ENDP

				; ---------------------------------------------------------------------------------
				; Name: calculateTruncAvg
				;
				; Calculates the truncated average from a given sum.
				;
				; Preconditions: The value passed should be the sum of a list of numbers. The list of numbers
				;	length should be equal to the value in the constant NUM_ARR_LENGTH.
				;
				; Postconditions: none.
				;
				; Receives: 
				;		[EBP + 24]	= sum of a list of numbers
				;		[EBP + 20]	= address of empty variable to store truncated average 
				;		NUM_ARR_LENGTH is global variable/constant
				;
				; Returns: [EBP + 20] = truncated average
				; ---------------------------------------------------------------------------------

 00000370			calculateTruncAvg PROC USES	EBP EDI EAX EBX EDX
 00000370  55		   *	    push   ebp
 00000371  57		   *	    push   edi
 00000372  50		   *	    push   eax
 00000373  53		   *	    push   ebx
 00000374  52		   *	    push   edx
 00000375  8B EC		  MOV	EBP, ESP

				  ; divide sum by the size of the list
 00000377  8B 45 1C		  MOV	EAX, [EBP + 28]
 0000037A  99			  CDQ
 0000037B  BB 0000000A		  MOV	EBX, NUM_ARR_LENGTH
 00000380  F7 FB		  IDIV	EBX

				  ; move results into truncated average variabled passed on the stack
 00000382  8B 7D 18		  MOV	EDI, [EBP + 24]
 00000385  89 07		  MOV	[EDI], EAX

 00000387  5A		   *	    pop    edx
 00000388  5B		   *	    pop    ebx
 00000389  58		   *	    pop    eax
 0000038A  5F		   *	    pop    edi
 0000038B  5D		   *	    pop    ebp
 0000038C  C2 0008		  RET	8
 0000038F			calculateTruncAvg ENDP

				END main


Microsoft (R) Macro Assembler Version 14.29.30143.0	    06/07/22 18:10:53
7Designing Low-Level I/O Procedures    (Proj6_backc.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000294 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000038F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000F2 _TEXT	Length= 0000009B Public STDCALL
  is_valid . . . . . . . . . . .	DWord	 bp - 00000004
  overflow_check . . . . . . . .	DWord	 bp - 00000008
  _Error . . . . . . . . . . . .	L Near	 0000012D _TEXT	
  _Validation  . . . . . . . . .	L Near	 0000014F _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000273 _TEXT	Length= 000000CA Public STDCALL
  string_arr_1 . . . . . . . . .	Byte	 bp - 0000000B
  string_arr_2 . . . . . . . . .	Byte	 bp - 00000016
  digit_total  . . . . . . . . .	Byte	 bp - 00000017
  inter_value  . . . . . . . . .	DWord	 bp - 0000001C
  is_negative  . . . . . . . . .	DWord	 bp - 00000020
  _CheckVal  . . . . . . . . . .	L Near	 000002C1 _TEXT	
  _AddToString . . . . . . . . .	L Near	 000002DD _TEXT	
  _PrintVal  . . . . . . . . . .	L Near	 00000302 _TEXT	
  _NegativeVal . . . . . . . . .	L Near	 00000311 _TEXT	
  _ReadChar  . . . . . . . . . .	L Near	 0000031B _TEXT	
  _CopyToNewArr  . . . . . . . .	L Near	 00000323 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateSum . . . . . . . . . .	P Near	 0000033D _TEXT	Length= 00000033 Public STDCALL
  inter_sum  . . . . . . . . . .	DWord	 bp - 00000004
  _NextVal . . . . . . . . . . .	L Near	 00000356 _TEXT	
calculateTruncAvg  . . . . . . .	P Near	 00000370 _TEXT	Length= 0000001F Public STDCALL
convertToDec . . . . . . . . . .	P Near	 000001E5 _TEXT	Length= 0000008E Public STDCALL
  inter_val  . . . . . . . . . .	DWord	 bp - 00000004
  is_negative  . . . . . . . . .	DWord	 bp - 00000008
  _ResetRegisters  . . . . . . .	L Near	 00000221 _TEXT	
  _NextChar  . . . . . . . . . .	L Near	 00000223 _TEXT	
  _EdgeCaseCheck . . . . . . . .	L Near	 00000243 _TEXT	
  _IsNegativeCheck . . . . . . .	L Near	 00000252 _TEXT	
  _StoreVal  . . . . . . . . . .	L Near	 0000025A _TEXT	
  _Overflow  . . . . . . . . . .	L Near	 00000261 _TEXT	
  _End . . . . . . . . . . . . .	L Near	 0000026A _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F2 Public STDCALL
  _GetNextVal  . . . . . . . . .	L Near	 00000016 _TEXT	
  _DisplayVal  . . . . . . . . .	L Near	 0000005B _TEXT	
  _Loop  . . . . . . . . . . . .	L Near	 00000074 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
validate . . . . . . . . . . . .	P Near	 0000018D _TEXT	Length= 00000058 Public STDCALL
  _UpperCheck  . . . . . . . . .	L Near	 0000019A _TEXT	
  _LowerCheck  . . . . . . . . .	L Near	 000001A8 _TEXT	
  _SignCheck . . . . . . . . . .	L Near	 000001B2 _TEXT	
  _IsSigned  . . . . . . . . . .	L Near	 000001C6 _TEXT	
  _True  . . . . . . . . . . . .	L Near	 000001C9 _TEXT	
  _False . . . . . . . . . . . .	L Near	 000001D4 _TEXT	
  _End . . . . . . . . . . . . .	L Near	 000001DD _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_STR_LENGTH . . . . . . . . .	Number	 0000001Dh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_ARR_LENGTH . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytes_read . . . . . . . . . . .	DWord	 00000281 _DATA	
converted_num  . . . . . . . . .	DWord	 00000285 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000225 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_spacing . . . . . . . . . .	Byte	 00000289 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
message_1  . . . . . . . . . . .	Byte	 000001C7 _DATA	
message_2  . . . . . . . . . . .	Byte	 000001EC _DATA	
message_3  . . . . . . . . . . .	Byte	 0000020A _DATA	
num_array  . . . . . . . . . . .	DWord	 0000023B _DATA	
prompt_error . . . . . . . . . .	Byte	 0000016E _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000014E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum  . . . . . . . . . . . . . .	DWord	 0000028C _DATA	
trunc_avg  . . . . . . . . . . .	DWord	 00000290 _DATA	
user_input . . . . . . . . . . .	Byte	 00000263 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
